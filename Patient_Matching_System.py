# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wTYJBeB-UZx6AxwR8S3Gejh1pJVwh_b0
"""

import math
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

def get_patient_input():
    print("Enter patient details:")
    try:
        age = int(input("Age (e.g., 45): "))
        if age < 0 or age > 120:
            raise ValueError("Invalid age")
    except ValueError:
        print("Invalid age; using default age 40")
        age = 40

    diagnosis_input = input("Diagnosis (Example: breast_cancer,diabetes): ").strip().lower()
    diagnosis = [d.strip() for d in diagnosis_input.split(",") if d.strip()]
    if not diagnosis:
        print("No diagnosis provided; using default 'unknown'")
        diagnosis = ["unknown"]

    location = input("Location (e.g., New_York, California): ").strip().title()
    if not location:
        print("No location provided; using default 'Unknown'")
        location = "Unknown"

    prior_treatment = input("Prior treatment (e.g., chemotherapy, none): ").strip().lower()
    if not prior_treatment:
        prior_treatment = "none"

    return {
        "age": age,
        "diagnosis": diagnosis,
        "location": location,
        "prior_treatment": prior_treatment
    }

def check_eligibility(patient, trial):
    """Check if patient meets trial's inclusion and exclusion criteria."""
    inclusion = trial["inclusion"]

    # Age match
    if patient["age"] < inclusion.get("age_min", 0) or patient["age"] > inclusion.get("age_max", 120):
        return False

    # Diagnosis must match one of the listed
    trial_diagnosis = inclusion.get("diagnosis", "")
    if trial_diagnosis not in patient["diagnosis"]:
        return False

    # Exclusion based on prior treatment
    exclusion = trial.get("exclusion", {})
    if "prior_treatment" in exclusion and patient["prior_treatment"] == exclusion["prior_treatment"]:
        return False

    return True

def score_match(patient, trial):
    """Score match using weighted system and simulated AI-based similarity."""
    score = 0
    weights = {"diagnosis": 50, "age": 30, "location": 20}

    # Diagnosis scoring (important for treatment relevance)
    if trial["inclusion"].get("diagnosis") in patient["diagnosis"]:
        score += weights["diagnosis"]

    # Age closeness
    age_mid = (trial["inclusion"].get("age_min", 0) + trial["inclusion"].get("age_max", 120)) / 2
    age_diff = abs(patient["age"] - age_mid)
    age_score = max(0, weights["age"] - (age_diff * 2))  # Ethical: not overly punishing age
    score += age_score

    # Location (less weighted for fairness)
    if patient["location"] == trial["location"]:
        score += weights["location"]

    return round(score, 2)

def vectorize_profile(patient, trial):
    """Convert profiles to vectors for cosine similarity scoring."""
    diagnoses = ["breast_cancer", "lung_cancer", "diabetes", "unknown"]
    locations = ["New_York", "California", "Chicago", "Boston", "Unknown"]

    patient_vec = [
        patient["age"] / 120,  # normalize age
        int(trial["inclusion"]["diagnosis"] in patient["diagnosis"]),
        locations.index(patient["location"]) / len(locations)
    ]

    trial_vec = [
        ((trial["inclusion"]["age_min"] + trial["inclusion"]["age_max"]) / 2) / 120,
        1,
        locations.index(trial["location"]) / len(locations)
    ]

    return np.array(patient_vec).reshape(1, -1), np.array(trial_vec).reshape(1, -1)

def ai_similarity_score(patient, trial):
    """Simulate AI scoring using cosine similarity."""
    p_vec, t_vec = vectorize_profile(patient, trial)
    similarity = cosine_similarity(p_vec, t_vec)[0][0] * 100
    return round(similarity, 2)

def rank_trials(patient, trials):
    """Rank eligible trials by combined match and AI similarity score."""
    results = []
    for trial in trials:
        if check_eligibility(patient, trial):
            basic_score = score_match(patient, trial)
            ai_score = ai_similarity_score(patient, trial)

            # Weighted average of rule-based and AI-based score
            final_score = round((0.6 * basic_score) + (0.4 * ai_score), 2)

            results.append({
                "name": trial["name"],
                "score": final_score,
                "matched_criteria": trial["inclusion"],
                "ai_score": ai_score,
                "basic_score": basic_score
            })

    return sorted(results, key=lambda x: x["score"], reverse=True)

def main():
    # Mock trial DB (in future, load from CSV/DB/API)
    trials = [
        {
            "name": "HER2+ Breast Cancer Trial",
            "location": "New_York",
            "inclusion": {"diagnosis": "breast_cancer", "age_min": 18, "age_max": 60},
            "exclusion": {"prior_treatment": "chemotherapy"}
        },
        {
            "name": "General Cancer Trial",
            "location": "California",
            "inclusion": {"diagnosis": "breast_cancer", "age_min": 30, "age_max": 70},
            "exclusion": {}
        },
        {
            "name": "Lung Cancer Immunotherapy",
            "location": "Chicago",
            "inclusion": {"diagnosis": "lung_cancer", "age_min": 40, "age_max": 80},
            "exclusion": {"prior_treatment": "radiation"}
        },
        {
            "name": "Early-Stage Breast Cancer Study",
            "location": "New_York",
            "inclusion": {"diagnosis": "breast_cancer", "age_min": 25, "age_max": 55},
            "exclusion": {"prior_treatment": "surgery"}
        },
        {
            "name": "Advanced Lung Cancer Trial",
            "location": "Boston",
            "inclusion": {"diagnosis": "lung_cancer", "age_min": 50, "age_max": 75},
            "exclusion": {}
        }
    ]

    patient = get_patient_input()
    ranked = rank_trials(patient, trials)

    print("\n Recommended Clinical Trials:")
    if not ranked:
        print("No eligible trials found.")
    else:
        for trial in ranked:
            print(f"Trial: {trial['name']}")
            print(f"Total Score: {trial['score']}%")
            print(f" - Rule-based Score: {trial['basic_score']}%")
            print(f" - AI Similarity Score: {trial['ai_score']}%")
            print(f" - Matched Criteria: {trial['matched_criteria']}")
            print("-" * 50)

if __name__ == "__main__":
    main()